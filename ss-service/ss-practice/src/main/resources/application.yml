# 项目相关配置
ssmodule:
  # 名称
  name: cir
  # 版本
  version: 3.5.0
  # 版权年份
  copyrightYear: 2021
  # 实例演示开关
  demoEnabled: true
  # 文件路径 示例（ Windows配置D:/jeethink/uploadPath，Linux配置 /home/jeethink/uploadPath）
  profile: D:/jeethink/uploadPath
  # 获取ip地址开关
  addressEnabled: false
  # 验证码类型 math 数组计算 char 字符验证
  captchaType: math

# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8955
  servlet:
    # 应用的访问路径
    context-path: /ss-practice
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # tomcat最大线程数，默认为200
    max-threads: 800
    # Tomcat启动初始化的线程数，默认值25
    min-spare-threads: 30

# Spring配置
spring:
  application:
    name: ss-practice
  cloud:
  main:
    allow-bean-definition-overriding: true
  datasource:
    #通用配置
    driver-class-name: com.mysql.jdbc.Driver
    password: root
    username: root
    url: jdbc:mysql://192.168.3.23:3306/shangsong?serverTimezone=Asia/Shanghai&useUnicode=true&charcterEncoding=UTF-8&useSSL=false

  security:
    user:
      name: user
      roles: admin
      password: 123456

  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  profiles:
    active: druid
  # 文件上传
  servlet:
    multipart:
      # 单个文件大小
      max-file-size: 10MB
      # 设置总上传的文件大小
      max-request-size: 20MB
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  # redis 配置
  redis:
    # 地址
    host: localhost
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms

# token配置
token:
  # 令牌自定义标识
  header: Authorization
  # 令牌密钥
  secret: abcdefghijklmnopqrstuvwxyz
  # 令牌有效期（默认30分钟）
  expireTime: 30

# MyBatis配置
# MyBatis配置
mybatis:
  # 搜索指定包别名
  typeAliasesPackage: com.ss.song.mapper
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapperLocations: classpath*:mapper/*Mapper.xml
  # 加载全局的配置文件
  configLocation: classpath:mybatis/mybatis-config.xml

# PageHelper分页插件
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

# Swagger配置
swagger:
  # 是否开启swagger
  enabled: true
  # 请求前缀
  pathMapping: /dev-api

# 日志配置
logging:
  level:
    com.ss.up: debug
    org.springframework: warn


# 防止XSS攻击
xss:
  # 过滤开关
  enabled: false
  # 排除链接（多个用逗号分隔）
  excludes: /system/notice/*
  # 匹配链接
  urlPatterns: /system/*,/monitor/*,/tool/*

#seata:
#  enabled: true
#  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true
#  tx-service-group: seata  #要与nacos配置中心的service.vgroupMapping.my_test_tx_group一致、
#  # 以下都是在conf的registry.conf文件中对应
#  registry:  #registry根据seata服务端的registry配置
#    type: nacos #默认为file
#    nacos:
#      application: seata-server # 配置自己的seata服务
#      server-addr: localhost:8848 #根据自己的seata服务配置
#      username: nacos
#      password: nacos
#      namespace: ffdbd7fa-3871-4344-85e5-490b1e5f6e2b  # seata-server在nacos的命名空间ID
#      cluster: default # 配置自己的seata服务cluster, 默认为 default
#      group: SEATA_GROUP    # seata-server在nacos的分组
#  config:
#    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service
#    nacos:
#      server-addr: localhost:8848 #配置自己的nacos地址
#      group: SEATA_GROUP #seata-server在nacos的分组
#      username: nacos
#      password: nacos
#      namespace: ffdbd7fa-3871-4344-85e5-490b1e5f6e2b
#      dataId: seataServer.properties   #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好
